{"version":3,"sources":["webpack:///./src/state/StoreProvider.tsx","webpack:///./src/state/middleware.ts","webpack:///./src/settings.ts","webpack:///./src/state/reducer.ts","webpack:///./src/render/middleware.ts","webpack:///./src/render/index.ts","webpack:///./src/render/worker.ts","webpack:///./src/db/index.ts","webpack:///./src/db/errors.ts"],"names":["StoreProvider","props","useState","INITIAL_STATE","state","setState","stateRef","useRef","dispatchRef","a","store","getState","current","dispatch","action","useEffect","database","createAnalyticsMiddleware","createRenderMiddleware","createAppDatabase","then","db","State","next","type","ensureAppPreferences","prefs","updateAppPreferences","payload","createLogMiddleware","reduceRight","handler","actionTypes","appPreferences","loading","id","update","board","updating","name","downloading","mode","solo","layerVisibility","otherIds","layers","map","ly","filter","lyId","nextVisibilty","every","reduce","result","savedBoards","prevLayerVisibility","prevVisibility","updatedBoard","b","indexOf","push","error","nextState","request","reducer","Provider","value","children","worker","RenderWorker","onmessage","event","log","debug","data","postMessage","url","URLSearchParams","window","location","search","slice","get","saveAs","file","module","exports","Worker","Dexie","version","stores","preferences","transaction","toArray","results","length","add","toCollection","modify","NotFoundError","message","Error"],"mappings":"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","file":"7.190c52e1c506e8413749.js","sourcesContent":["import React, {useState, useRef, useEffect} from 'react'\r\n\r\nimport reducer from './reducer'\r\nimport createMiddleware from './middleware'\r\nimport {INITIAL_STATE, StoreContext} from './context'\r\nimport {State, Dispatch, Action} from './types'\r\n\r\nexport type StoreProps = {\r\n  children: React.ReactNode\r\n}\r\n\r\nexport default function StoreProvider(props: StoreProps): JSX.Element {\r\n  const [state, setState] = useState(INITIAL_STATE)\r\n  const stateRef = useRef<State>(state)\r\n  const dispatchRef = useRef<Dispatch>(a => a)\r\n  const store = {\r\n    getState: (): State => stateRef.current,\r\n    dispatch: (action: Action) => dispatchRef.current(action),\r\n  }\r\n\r\n  useEffect((): void => {\r\n    dispatchRef.current = createMiddleware().reduceRight<Dispatch>(\r\n      (next, handler) => handler(store)(next),\r\n      function baseDispatch(action) {\r\n        stateRef.current = reducer(stateRef.current, action)\r\n        setState(stateRef.current)\r\n        return action\r\n      }\r\n    )\r\n  }, [])\r\n\r\n  return (\r\n    <StoreContext.Provider value={store}>\r\n      {props.children}\r\n    </StoreContext.Provider>\r\n  )\r\n}\r\n","// all store middleware\r\nimport {createAnalyticsMiddleware} from '../analytics'\r\nimport {createLogMiddleware} from '../logger'\r\nimport {createRenderMiddleware} from '../render'\r\nimport {createSettingsMiddleware} from '../settings'\r\nimport {Middleware} from './types'\r\n\r\nexport default function createMiddleware(): Array<Middleware> {\r\n  return [\r\n    createAnalyticsMiddleware(),\r\n    createRenderMiddleware(),\r\n    createSettingsMiddleware(),\r\n    createLogMiddleware(),\r\n  ]\r\n}\r\n","import * as State from './state'\r\nimport {\r\n  createAppDatabase,\r\n  ensureAppPreferences,\r\n  updateAppPreferences,\r\n  AppDatabase,\r\n} from './db'\r\n\r\nexport function createSettingsMiddleware(): State.Middleware {\r\n  let database: AppDatabase | undefined\r\n\r\n  return store => {\r\n    const {dispatch} = store\r\n\r\n    createAppDatabase().then(db => {\r\n      database = db\r\n      dispatch(State.fetchAppPreferences())\r\n    })\r\n\r\n    return next => action => {\r\n      if (database) {\r\n        const db: AppDatabase = database\r\n\r\n        switch (action.type) {\r\n          case State.FETCH_APP_PREFERENCES: {\r\n            ensureAppPreferences(db).then(prefs =>\r\n              dispatch(State.appPreferences(prefs))\r\n            )\r\n            break\r\n          }\r\n\r\n          case State.UPDATE_APP_PREFERENCES: {\r\n            updateAppPreferences(db, action.payload)\r\n              .then(() => ensureAppPreferences(db))\r\n              .then(prefs => dispatch(State.appPreferences(prefs)))\r\n            break\r\n          }\r\n        }\r\n      }\r\n\r\n      return next(action)\r\n    }\r\n  }\r\n}\r\n","import * as actionTypes from './actions'\r\nimport {INITIAL_STATE} from './context'\r\nimport {Action, State} from './types'\r\n\r\nexport default function reducer(state: State, action: Action): State {\r\n  switch (action.type) {\r\n    case actionTypes.APP_PREFERENCES: {\r\n      return {...state, appPreferences: action.payload}\r\n    }\r\n\r\n    case actionTypes.CREATE_BOARD:\r\n    case actionTypes.CREATE_BOARD_FROM_URL: {\r\n      return {...state, loading: true}\r\n    }\r\n\r\n    case actionTypes.GET_BOARD:\r\n    case actionTypes.DELETE_BOARD:\r\n    case actionTypes.DELETE_ALL_BOARDS: {\r\n      return {...state, loading: true}\r\n    }\r\n\r\n    case actionTypes.UPDATE_BOARD: {\r\n      const {id, update} = action.payload\r\n      if (!state.board || state.board.id !== id) return state\r\n\r\n      return {\r\n        ...state,\r\n        updating: true,\r\n        board: {\r\n          ...state.board,\r\n          name: update.name || state.board.name,\r\n        },\r\n      }\r\n    }\r\n\r\n    case actionTypes.GET_BOARD_PACKAGE: {\r\n      return {...state, downloading: true}\r\n    }\r\n\r\n    case actionTypes.SET_MODE: {\r\n      return {...state, mode: action.payload}\r\n    }\r\n\r\n    case actionTypes.TOGGLE_VISIBILITY: {\r\n      const {id, solo} = action.payload\r\n      const {board} = state\r\n      let layerVisibility = {\r\n        ...state.layerVisibility,\r\n        [id]: solo || !state.layerVisibility[id],\r\n      }\r\n\r\n      if (solo) {\r\n        const layers = board ? board.layers : []\r\n        const otherIds = layers.map(ly => ly.id).filter(lyId => lyId !== id)\r\n        const nextVisibilty = otherIds.every(lyId => !layerVisibility[lyId])\r\n\r\n        layerVisibility = otherIds.reduce(\r\n          (result, id) => ({...result, [id]: nextVisibilty}),\r\n          layerVisibility\r\n        )\r\n      }\r\n\r\n      return {...state, layerVisibility}\r\n    }\r\n\r\n    case actionTypes.WORKER_INITIALIZED: {\r\n      return {...state, savedBoards: action.payload}\r\n    }\r\n\r\n    case actionTypes.BOARD_RENDERED: {\r\n      const {mode, layerVisibility: prevLayerVisibility} = state\r\n      const board = action.payload\r\n      const layerVisibility = board.layers.reduce((result, ly) => {\r\n        const prevVisibility = prevLayerVisibility[ly.id]\r\n        return {\r\n          ...result,\r\n          [ly.id]: prevVisibility != null ? prevVisibility : true,\r\n        }\r\n      }, {})\r\n\r\n      return {\r\n        ...state,\r\n        board,\r\n        layerVisibility,\r\n        mode: mode || 'top',\r\n        loading: false,\r\n        updating: false,\r\n      }\r\n    }\r\n\r\n    case actionTypes.BOARD_UPDATED: {\r\n      const updatedBoard = action.payload\r\n      const savedBoards = state.savedBoards.map(b =>\r\n        b.id === updatedBoard.id ? updatedBoard : b\r\n      )\r\n\r\n      if (savedBoards.indexOf(updatedBoard) < 0) savedBoards.push(updatedBoard)\r\n\r\n      return {...state, savedBoards}\r\n    }\r\n\r\n    case actionTypes.BOARD_DELETED: {\r\n      const id = action.payload\r\n      const savedBoards = state.savedBoards.filter(b => b.id !== id)\r\n      let {board, mode} = state\r\n\r\n      if (board && board.id === id) {\r\n        board = null\r\n        mode = null\r\n      }\r\n\r\n      return {...state, mode, board, savedBoards, loading: false}\r\n    }\r\n\r\n    case actionTypes.BOARD_PACKAGED: {\r\n      return {...state, downloading: false}\r\n    }\r\n\r\n    case actionTypes.ALL_BOARDS_DELETED: {\r\n      return INITIAL_STATE\r\n    }\r\n\r\n    case actionTypes.DISMISS_ERROR: {\r\n      return {...state, error: null}\r\n    }\r\n\r\n    case actionTypes.WORKER_ERRORED: {\r\n      const nextState = {...state, error: action.payload.error}\r\n\r\n      switch (action.payload.request.type) {\r\n        case actionTypes.CREATE_BOARD:\r\n        case actionTypes.CREATE_BOARD_FROM_URL:\r\n        case actionTypes.DELETE_BOARD:\r\n        case actionTypes.DELETE_ALL_BOARDS:\r\n          return {...nextState, loading: false}\r\n\r\n        case actionTypes.UPDATE_BOARD:\r\n          return {...nextState, updating: false}\r\n\r\n        case actionTypes.GET_BOARD_PACKAGE:\r\n          return {...nextState, downloading: false}\r\n      }\r\n\r\n      return nextState\r\n    }\r\n  }\r\n\r\n  return state\r\n}\r\n","import {saveAs} from 'file-saver'\r\nimport * as State from '../state'\r\nimport log from '../logger'\r\nimport RenderWorker from './worker'\r\nimport {WorkerMessageEvent} from './types'\r\n\r\nexport function createRenderMiddleware(): State.Middleware {\r\n  const worker = new RenderWorker()\r\n\r\n  return store => {\r\n    const {dispatch} = store\r\n\r\n    worker.onmessage = function handleWorkerMessage(event: WorkerMessageEvent) {\r\n      log.debug('action received from RenderWorker', event.data.type)\r\n      dispatch(event.data)\r\n    }\r\n\r\n    return next => action => {\r\n      switch (action.type) {\r\n        case State.CREATE_BOARD:\r\n        case State.CREATE_BOARD_FROM_URL:\r\n        case State.GET_BOARD:\r\n        case State.GET_BOARD_PACKAGE:\r\n        case State.UPDATE_BOARD:\r\n        case State.DELETE_BOARD:\r\n        case State.DELETE_ALL_BOARDS: {\r\n          log.debug('sending action to RenderWorker', action.type)\r\n          worker.postMessage(action)\r\n          break\r\n        }\r\n\r\n        case State.WORKER_INITIALIZED: {\r\n          const query = new URLSearchParams(window.location.search.slice(1))\r\n          const url = query.get('boardUrl')\r\n\r\n          if (url) dispatch(State.createBoardFromUrl(url))\r\n          break\r\n        }\r\n\r\n        case State.BOARD_PACKAGED: {\r\n          saveAs(action.payload.file, `${action.payload.name}.zip`)\r\n          break\r\n        }\r\n      }\r\n\r\n      return next(action)\r\n    }\r\n  }\r\n}\r\n","// render and file related side-effects\r\nexport * from './middleware'\r\nexport * from './types'\r\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"ebf66978fbd67ffde235.worker.js\");\n};","// indexedDB storage of layers and boards\r\nimport {Board, BoardSummary} from '../types'\r\nimport {NotFoundError} from './errors'\r\nimport {BoardDatabase, DbBoard, AppDatabase, DbAppPreferences} from './types'\r\nexport * from './types'\r\n\r\nexport async function createBoardDatabase(): Promise<BoardDatabase> {\r\n  return import('dexie').then(({default: Dexie}) => {\r\n    const db = new Dexie('BoardDatabase')\r\n\r\n    db.version(1).stores({\r\n      boards: 'id, &sourceUrl',\r\n      layers: 'id, sourceId',\r\n      sources: 'id',\r\n    })\r\n\r\n    return db as BoardDatabase\r\n  })\r\n}\r\n\r\nexport async function createAppDatabase(): Promise<AppDatabase> {\r\n  return import('dexie').then(({default: Dexie}) => {\r\n    const db = new Dexie('AppDatabase')\r\n\r\n    db.version(1).stores({preferences: '++'})\r\n\r\n    return db as AppDatabase\r\n  })\r\n}\r\n\r\nexport async function ensureAppPreferences(\r\n  db: AppDatabase\r\n): Promise<DbAppPreferences> {\r\n  return db.transaction('rw', db.preferences, async () => {\r\n    return db.preferences.toArray().then(results => {\r\n      if (results.length === 0) {\r\n        const prefs = {}\r\n        return db.preferences.add(prefs).then(() => prefs)\r\n      }\r\n\r\n      return results[0]\r\n    })\r\n  })\r\n}\r\n\r\nexport async function updateAppPreferences(\r\n  db: AppDatabase,\r\n  update: DbAppPreferences\r\n): Promise<number> {\r\n  return db.preferences.toCollection().modify(update)\r\n}\r\n\r\nexport async function saveBoard(\r\n  db: BoardDatabase,\r\n  board: Board\r\n): Promise<string> {\r\n  return db.transaction('rw', db.boards, db.layers, db.sources, async () => {\r\n    const {layers, ...dbBoard} = board\r\n\r\n    const dbLayers = dbBoard.layerIds.map(lyId => {\r\n      const {source: _source, ...dbLayer} = layers[lyId]\r\n      return dbLayer\r\n    })\r\n\r\n    const dbSources = dbBoard.layerIds.map(lyId => {\r\n      const {sourceId: id, source: contents} = layers[lyId]\r\n      return {id, contents}\r\n    })\r\n\r\n    db.sources.bulkPut(dbSources)\r\n    db.layers.bulkPut(dbLayers)\r\n    return db.boards.put(dbBoard)\r\n  })\r\n}\r\n\r\nexport async function getBoard(db: BoardDatabase, id: string): Promise<Board> {\r\n  return db.transaction('r', db.boards, db.layers, db.sources, async () =>\r\n    db.boards.get(id).then(board => {\r\n      if (!board) throw new NotFoundError(`board ${id} not found`)\r\n      return getFullBoard(db, board)\r\n    })\r\n  )\r\n}\r\n\r\nexport async function getBoards(\r\n  db: BoardDatabase\r\n): Promise<Array<BoardSummary>> {\r\n  return db.boards.toArray().then(boards =>\r\n    boards.map(b => {\r\n      const {id, name, options, thumbnail} = b\r\n      return {id, name, options, thumbnail}\r\n    })\r\n  )\r\n}\r\n\r\nexport async function findBoardByUrl(\r\n  db: BoardDatabase,\r\n  url: string\r\n): Promise<Board | null> {\r\n  return db.transaction('r', db.boards, db.layers, db.sources, async () =>\r\n    db.boards\r\n      .get({sourceUrl: url})\r\n      .then(board => (board ? getFullBoard(db, board) : Promise.resolve(null)))\r\n  )\r\n}\r\n\r\nexport async function deleteBoard(\r\n  db: BoardDatabase,\r\n  id: string\r\n): Promise<void> {\r\n  return db.transaction('rw', db.boards, db.layers, db.sources, () =>\r\n    getBoard(db, id).then(board => {\r\n      const sourceIds = Object.values(board.layers).map(ly => ly.sourceId)\r\n\r\n      db.boards.delete(id)\r\n      db.layers\r\n        .bulkDelete(board.layerIds)\r\n        .then(() => db.layers.orderBy('sourceId').uniqueKeys())\r\n        .then(sourceIdsToKeep => {\r\n          const sourceIdsToDelete = sourceIds.filter(\r\n            id => !sourceIdsToKeep.includes(id)\r\n          )\r\n\r\n          db.sources.bulkDelete(sourceIdsToDelete)\r\n        })\r\n    })\r\n  )\r\n}\r\n\r\nexport async function deleteAllBoards(db: BoardDatabase): Promise<void> {\r\n  return db.transaction('rw', db.boards, db.layers, db.sources, () => {\r\n    db.sources.clear()\r\n    db.layers.clear()\r\n    db.boards.clear()\r\n  })\r\n}\r\n\r\nasync function getFullBoard(db: BoardDatabase, board: DbBoard): Promise<Board> {\r\n  const layersQuery = db.layers\r\n    .where('id')\r\n    .anyOf(board.layerIds)\r\n    .toArray()\r\n\r\n  const sourcesQuery = layersQuery.then(layers =>\r\n    db.sources\r\n      .where('id')\r\n      .anyOf(layers.map(ly => ly.sourceId))\r\n      .toArray()\r\n  )\r\n\r\n  return Promise.all([layersQuery, sourcesQuery]).then(([layers, sources]) => {\r\n    const layersMap = layers.reduce((result, layer) => {\r\n      const source = sources.find(s => s.id === layer.sourceId)\r\n      return source\r\n        ? {...result, [layer.id]: {...layer, source: source.contents}}\r\n        : result\r\n    }, {})\r\n\r\n    return {...board, layers: layersMap}\r\n  })\r\n}\r\n","export class NotFoundError extends Error {\r\n  constructor(message: string) {\r\n    super(message)\r\n    this.name = NotFoundError.name\r\n  }\r\n}\r\n"],"sourceRoot":""}